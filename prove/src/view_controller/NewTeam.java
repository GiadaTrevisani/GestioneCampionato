/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view_controller;

import java.awt.Dimension;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.Ranking;
import model.Team;
import prove.Prove;

/**
 * Questo JFrame viene visualizzato quando l'utente clicca sul bottone "Nuovo" o
 * "Visualizza Modifica" dalla classe ManagementTeam e permette di aggiungere, 
 * modificare o eliminare una squadra inserendo nei campi nome o città il nuovo
 * nome o città della squadra, si ha anche la possibilità di cambiare logo.
 * Se in una nuova squadra non si inserisce il logo ne viene assegnato uno di 
 * default (Soliera.jpg).
 * @author giadatrevisani
 */
public class NewTeam extends javax.swing.JFrame {
    private final String sport;
    private String imgPath;
    private final Ranking rank;
    private final Team team;
    private String filePath;
    private final ManagementTeams father;
    /**
     * Il cotruttore dlla calsse NewTeam prende in ingresso il team che si vuole
     * aggiungere o aggiornare e l'oggetto di tipo Ranking dove andremo a salvare
     * le squadre da aggiungere o da aggiornare attraverso il bottone btnNew.
     * Ci sarà anche un bottone per cercare il logo della squadra tra quelli
     * presenti nella directory img_logo.
     * @param team indica un oggeto di tipo Team.
     * @param rank indica un oggetto di tipo Raning.
     * @param father indica un oggetto di tipo JFrame.
     * @param sport stringa che indica il tipo di sport.
     */
    public NewTeam(Team team, Ranking rank, ManagementTeams father, String sport){
        this.sport = sport;
        this.imgPath = "Soliera.jpg";
        this.rank = rank;
        this.team = team;
        this.father = father;
        initComponents();
        
        try {
            File p = new File(Prove.class.getProtectionDomain().getCodeSource().getLocation()
                    .toURI());
            String jarPath = p.getAbsolutePath();
            filePath = jarPath.replace(p.getName(), "") + "img_logo/";
        } catch (URISyntaxException ex) {
            filePath =  "img_logo/";
        }
                
        this.creaGui();
        printTeam();
    }
    
    private void creaGui(){
        this.setTitle(sport);
        this.setMinimumSize(new Dimension(700, 500));
        this.setSize(800, 600); 
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    /**
     * Questo metodo mi permette di visualizzare la squadra che dovrò modificare 
     * attraverso la stampa del nome, città e logo della squadra che sarà passata
     * per viewTeam al momento in cui viene cliccato il bottone "visualizza
     * Modifica". Invece se l'utente ha cliccato sul bottone "Nuova" allora le
     * textfield saranno vuote e sarà possibile creare una nuova.
     */
    private void printTeam(){
        txtName.setText(team.getName());
        txtCity.setText(team.getCity());
        try{
            if(team.getLogo().equals("")){
                imgPath = filePath + imgPath;
                lblimg.setIcon(new ImageIcon(ImageIO.read(new File(imgPath)).getScaledInstance(200, 200, Image.SCALE_SMOOTH)));   
            } else {
                 lblimg.setIcon(new ImageIcon(ImageIO.read(new File(team.getLogo())).getScaledInstance(200, 200, Image.SCALE_SMOOTH)));
            }
        } catch (IOException ex){
            System.out.println("Immagine non esistente");
            JOptionPane.showMessageDialog(null, "Immagine non esistente");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblLogo = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        lblimg = new javax.swing.JLabel();
        deletebtn = new javax.swing.JButton();
        btnFindLogo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblName.setText("Nome: ");

        lblCity.setText("Città: ");

        lblLogo.setText("Logo: ");

        btnNew.setText("Nuovo/Aggiorna");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        deletebtn.setText("Elimina");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        btnFindLogo.setText("...");
        btnFindLogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindLogoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                .addComponent(txtCity))
                            .addComponent(lblimg, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFindLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCity)
                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnFindLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblimg, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNew, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Inizialmente controlleremo se nel team passato il nome della squadra è
    * una stringa vuota, allora vuol dire che l'utente ha cliccato su nuova squadra.
    * Quindi andrò a verificare che i campi di testo txtName e txtCity siano riempiti,
    * in caso contrario il programma stamperà un messaggio.
    * A questo punto, se non è una squadra nuova allora sarà una squadra che voglio
    * aggiornare, quindi per prima cosa guarderò se effettivamente i capi text sono
    * stati cambiati oppure no (in quest'ultimo caso stamperò un messaggio). Come 
    * seconda cosa aggiornerò la squadra.
     * @param evt 
     */
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        
        if(team.getName().equals("")){
            if(txtName.getText().equals("") || txtCity.getText().equals("")){
                //Notifica di quello che è successo
                System.out.println("Uno dei campi è vuoto");
                JOptionPane.showMessageDialog(null, "Uno dei campi è vuoto");
            } else {
                System.out.println("Inserisco");
                team.setName(txtName.getText());
                team.setCity(txtCity.getText());
                team.setLogo(imgPath);
                rank.addTeam(team);
                //Notifica di quello che è successo
                System.out.println("Squadra inserita correttamente");
                JOptionPane.showMessageDialog(null, "Squadra inserita correttamente");
            }
        } else {
            if(txtName.getText().equals("") || txtCity.getText().equals("")){
                //Notifica di quello che è successo
                System.out.println("Uno dei campi è vuoto");
                JOptionPane.showMessageDialog(null, "Uno dei campi è vuoto");
                return ;
            }
            if(txtName.getText().equals(team.getName()) && txtCity.getText().equals(team.getCity()) && lblimg.getText().equals(team.getLogo())){
                //Notifica di quello che è successo
                System.out.println("La squadra non è stata modificata");
                JOptionPane.showMessageDialog(null, "La squadra non è stata modificata, nessun cambiamento.");
            } else {
                if(!txtName.getText().equals("") && (txtName.getText().equals(team.getName()) || !rank.isTeamforName(txtName.getText()))){
                    team.setName(txtName.getText());
                    team.setCity(txtCity.getText());
                    team.setLogo(imgPath);
                    //Notifica di quello che è successo
                    System.out.println("Squadra modificata correttamente");
                    JOptionPane.showMessageDialog(null, "Squadra modificata correttamente");
                } else {
                    //Notifica di quello che è successo
                    System.out.println("La squadra non è stata modificata");
                    System.out.println("Il nome è vuoto oppure esiste già una squadra con quel nome");
                    JOptionPane.showMessageDialog(null, "La squadra non è stata modificata: Il nome è vuoto oppure esiste già una squadra con quel nome");
                }
            }  
        }
        
        //aggiorno la tabella nella finestra padre (vista delle squadre)
        father.printTable();
        father.setOpenNew(false);
        father.setopenViewUpdate(false);
        //chiudo la finestra, tanto la squadra è stata eliminata, sia che questa fosse nuova o da modificare
        this.dispose();
    }//GEN-LAST:event_btnNewActionPerformed

    /**
     * Questo metodo permette di cercare il logo della squadra attraverso un
     * JFileChooser, dove sarà possibile cercare il logo della squadra desiderata
     * tra i file che si possiedono.
     * @param evt 
     */
    private void btnFindLogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindLogoActionPerformed
        JFileChooser fc = new JFileChooser(new File(filePath));
        File file = null;
        fc.setFileFilter(new FileNameExtensionFilter("Only image extension filter", "jpg", "jpeg", "png"));
        int res = fc.showOpenDialog(this);
        if(res == JFileChooser.APPROVE_OPTION){
            file = fc.getSelectedFile();
        } else {
            return ;
        }
        
        if(file!=null){
            imgPath = file.toString();
            try{
                lblimg.setIcon(new ImageIcon(ImageIO.read(new File(imgPath)).getScaledInstance(200, 200,
        Image.SCALE_SMOOTH)));
            } catch (IOException ex){
                System.out.println("Immagine non esistente");
                JOptionPane.showMessageDialog(null, "Immagine non esistente");
            }
        }else{
            System.err.println("Errore nel caricamento del file!");
            JOptionPane.showMessageDialog(null, "Errore nel caricamento del file");
        }
    }//GEN-LAST:event_btnFindLogoActionPerformed

    /**
     * Questo metodo viene chiamato nel momento in cui l'utente clicca sul bottone
     * "Elimina" usato per eliminare la squadra che l'utente ha selezionato nella
     * classe ViewTeam. Finito di eliminare la squdra la finestra viene chiusa 
     * automaticamente.
     * @param evt 
     */
    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        //Elimino il team con il metodo della classe ranking
        rank.deleteTeam(team);
        
        //Notifica di quello che è successo
        System.out.println("Squadra eliminata");
        JOptionPane.showMessageDialog(null, "Squadra eliminata correttamente");
        
        //aggiorno la tabella nella finestra padre (vista delle squadre)
        father.printTable();
        
        father.setopenViewUpdate(false);
        //chiudo la finestra, tanto la squadra è stata eliminata, sia che questa fosse nuova o da modificare
        this.dispose();
    }//GEN-LAST:event_deletebtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFindLogo;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton deletebtn;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblimg;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
