/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view_controller;

import java.awt.print.PrinterException;
import java.io.FileNotFoundException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Match;
import model.Ranking;
import model.Team;

/**
 *
 * @author giadatrevisani
 */
public class ViewCalendar extends javax.swing.JFrame {
    private final String sport;
    private final Ranking rank;
    private final DefaultTableModel model;
    private boolean openViewUpdate;
    private boolean openYear;
    
    public ViewCalendar(Ranking rank, String sport){
        this.sport = sport;
        openViewUpdate = false;
        openYear = false;
        this.rank = rank;
        initComponents();
        model = (DefaultTableModel) viewCalendar.getModel();
        
        this.setTitle(sport);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        rank.getCalendar().setYear(2018);
    }
    
    public void printTable(){
        model.setRowCount(0);
        for(int i = 0; i < rank.getCalendar().getGames().size(); i++){
            if(rank.getCalendar().getGames().get(i).getPlayed() == false){
                model.insertRow(i, new Object[]{rank.getCalendar().getGames().get(i).getDay(), rank.getCalendar().getGames().get(i).getHomeTeam().getCity(), rank.getCalendar().getGames().get(i).getHomeTeam().getName(), rank.getCalendar().getGames().get(i).getGuestTeam().getName(), 0, 0});
            } else {
                model.insertRow(i, new Object[]{rank.getCalendar().getGames().get(i).getDay(), rank.getCalendar().getGames().get(i).getHomeTeam().getCity(), rank.getCalendar().getGames().get(i).getHomeTeam().getName(), rank.getCalendar().getGames().get(i).getGuestTeam().getName(), rank.getCalendar().getGames().get(i).getPointsHome(), rank.getCalendar().getGames().get(i).getPointsGuest()});
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchtxt = new javax.swing.JTextField();
        finebtn = new javax.swing.JButton();
        serachbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewCalendar = new javax.swing.JTable();
        javax.swing.JButton takeCalendarbtn = new javax.swing.JButton();
        saveCalendarbtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        viewbtn = new javax.swing.JButton();
        printbtn = new javax.swing.JButton();
        createCalendar = new javax.swing.JButton();
        yearlbl = new javax.swing.JLabel();
        insertYearlbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        finebtn.setText("X");
        finebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finebtnActionPerformed(evt);
            }
        });

        serachbtn.setText("cerca");
        serachbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serachbtnActionPerformed(evt);
            }
        });

        viewCalendar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Giornata", "Citt√†", "Squadra Casa", "Squadra Ospite", "Punti Casa", "Punti Ospite", "Giocata"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewCalendar);

        takeCalendarbtn.setText("<html><p style = \"text-align: center\">Carica <br>Campionato</p></html>");
        takeCalendarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeCalendarbtnActionPerformed(evt);
            }
        });

        saveCalendarbtn.setText("<html><p style = \"text-align: center\">Salva <br>Campionato</p></html>");
        saveCalendarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCalendarbtnActionPerformed(evt);
            }
        });

        deletebtn.setText("<html><p style = \"text-align: center\">Elimina<br>Risultati</p></html>");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        viewbtn.setText("<html><p style = \"text-align: center\">Modifica<br>Visualizza</p></html>");
        viewbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewbtnActionPerformed(evt);
            }
        });

        printbtn.setText("Stampa");
        printbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printbtnActionPerformed(evt);
            }
        });

        createCalendar.setText("<html><p style = \"text-align: center\">Crea <br>Calendario</p></html>");
        createCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCalendarActionPerformed(evt);
            }
        });

        yearlbl.setText("Anno: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(yearlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insertYearlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(serachbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewbtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(takeCalendarbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(saveCalendarbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(printbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(createCalendar, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(finebtn)
                        .addComponent(serachbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(viewbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(yearlbl, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(insertYearlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(printbtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deletebtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(takeCalendarbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveCalendarbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(createCalendar)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void finebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finebtnActionPerformed
        searchtxt.setText("");
        printTable();
    }//GEN-LAST:event_finebtnActionPerformed

    private void serachbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serachbtnActionPerformed
        int j = 0;
        model.setRowCount(0);
        for (int i = 0; i < rank.getCalendar().getGames().size(); i++) {
            if(rank.getCalendar().getGames().get(i).getHomeTeam().getName().equals(searchtxt.getText()) || rank.getCalendar().getGames().get(i).getGuestTeam().getName().equals(searchtxt.getText()) || searchtxt.equals(rank.getCalendar().getYear())){
                model.insertRow(j, new Object[]{rank.getCalendar().getGames().get(i).getDay(), rank.getCalendar().getGames().get(i).getHomeTeam().getCity(),rank.getCalendar().getGames().get(i).getHomeTeam().getName(), rank.getCalendar().getGames().get(i).getGuestTeam().getName(), rank.getCalendar().getGames().get(i).getPointsHome(), rank.getCalendar().getGames().get(i).getPointsGuest(), rank.getCalendar().getGames().get(i).getPlayed()} );
                j++;
            }
        }
    }//GEN-LAST:event_serachbtnActionPerformed

    private void takeCalendarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeCalendarbtnActionPerformed
        rank.getCalendar().takeFromFile(rank.getTeams());
        printTable();
    }//GEN-LAST:event_takeCalendarbtnActionPerformed

    private void saveCalendarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCalendarbtnActionPerformed
        try {
            rank.getCalendar().saveCalendar();
            System.out.println("Salvato su file");
            JOptionPane.showMessageDialog(null, "Salvato su file");
        } catch (FileNotFoundException ex) {
            System.out.println("Salvataggio non avvenuto");
            JOptionPane.showMessageDialog(null, "Salvataggio non avvenuto");
        }
    }//GEN-LAST:event_saveCalendarbtnActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
        rank.getCalendar().deleteResults();
        printTable();
    }//GEN-LAST:event_deletebtnActionPerformed

    private void viewbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewbtnActionPerformed
        if(openYear == false){ 
            openYear = true;
            int selectedRowIndex = viewCalendar.getSelectedRow();
            Match view_update;
            Team updateHome;
            Team updateGuest;
            try {
                updateHome = rank.getTeamforName(viewCalendar.getModel().getValueAt(selectedRowIndex, 2).toString());
                updateGuest = rank.getTeamforName(viewCalendar.getModel().getValueAt(selectedRowIndex, 3).toString());
                view_update = new Match(updateHome, updateGuest, Integer.parseInt(viewCalendar.getModel().getValueAt(selectedRowIndex, 4).toString()), Integer.parseInt(viewCalendar.getModel().getValueAt(selectedRowIndex, 5).toString()), Integer.parseInt(viewCalendar.getModel().getValueAt(selectedRowIndex, 0).toString()) );
            } catch (Exception ex) {
                System.out.println("Errore, il match presente nella tabella non √® presente nella lista dei match");
                JOptionPane.showMessageDialog(null, "Errore, il match presente nella tabella non √® presente nella lista dei match");
                return ;
            }
            ViewMatch viewMatch;
            
            viewMatch= new ViewMatch(view_update, this, sport);
            viewMatch.setVisible(true);
            viewMatch.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                    openYear = false;
                }
            });
        }
    }//GEN-LAST:event_viewbtnActionPerformed

    private void createCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCalendarActionPerformed
        if(openViewUpdate == false){ 
            openViewUpdate = true;
            
            InsertYear insertYear;
            insertYear = new InsertYear(rank, sport, this);
            insertYear.setVisible(true);
            insertYear.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                    openViewUpdate = false;
                }
            });
            rank.getCalendar().AlgoritmoDiBerger(rank.getTeams());
            printTable();
        }
    }//GEN-LAST:event_createCalendarActionPerformed

    private void printbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printbtnActionPerformed
        try{
            this.viewCalendar.print(JTable.PrintMode.FIT_WIDTH);
        } catch (PrinterException ex){
            System.out.println("Impossibile stampare il campionato");
            JOptionPane.showMessageDialog(null, "Impossibile stampare il campionato");
        }
    }//GEN-LAST:event_printbtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createCalendar;
    private javax.swing.JButton deletebtn;
    private javax.swing.JButton finebtn;
    public javax.swing.JLabel insertYearlbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton printbtn;
    private javax.swing.JButton saveCalendarbtn;
    private javax.swing.JTextField searchtxt;
    private javax.swing.JButton serachbtn;
    private javax.swing.JTable viewCalendar;
    private javax.swing.JButton viewbtn;
    private javax.swing.JLabel yearlbl;
    // End of variables declaration//GEN-END:variables
}
